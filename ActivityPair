import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;


public class ActivityPair {
	
	static HashMap<String, ArrayList<String>> possibleEdgeTable = new HashMap<String, ArrayList<String>>(); // only used in SP tree pruning (nodeID, [edgeID])
	
	// returns the index of the smallest number among four inputs
	int minOfFour (double zero, double one, double two, double three){
		double temp1 = Math.min(zero, one);
		double temp2 = Math.min(two, three);
		if (Math.min(temp1, temp2) == zero ) return 0;
		if (Math.min(temp1, temp2) == one ) return 1;
		if (Math.min(temp1, temp2) == two ) return 2;
		if (Math.min(temp1, temp2) == three ) return 3;
		return -1;
	}
	
	// similar to minOfFour(), but return the value instead of index
	double minOfFourValue (double zero, double one, double two, double three) {
		double temp1 = Math.min(zero, one);
		double temp2 = Math.min(two, three);
		return Math.min(temp1, temp2);
	}
	
	double maxOfFourValue (double zero, double one, double two, double three) {
		double temp1 = Math.max(zero, one);
		double temp2 = Math.max(two, three);
		return Math.max(temp1, temp2);
	}
	
	// returns true if two input edges are just reversed
	boolean ifReversedEdge(String edgeID1, String edgeID2) {
		if ((NetworkDataset.edgeHashMap.get(edgeID1).startNodeID.equals(NetworkDataset.edgeHashMap.get(edgeID2).endNodeID))
			&& (NetworkDataset.edgeHashMap.get(edgeID1).endNodeID.equals(NetworkDataset.edgeHashMap.get(edgeID2).startNodeID))){
			return true;
		}
		else {
			return false;
		}
	}
	
	void processAllActivityPair() {
		
		double weight1 = 0, weight2 = 0;
		double weight3 = 0, weight4 = 0;
		String startNode1ID = null; // node 1 of start edge
		String startNode2ID = null; // node 2 of start edge
		String endNode1ID = null; // node 1 of end edge
		String endNode2ID = null; // node 2 of end edge
		double statisticMeasureValue = -1;
		
		for ( String edgeKeysStart : NetworkDataset.edgeHashMap.keySet() ) { // 2-level loop to enumerate all pairs of active edges
			if (NetworkDataset.edgeHashMap.get(edgeKeysStart).ifActiveEdge == true) {	
		
				startNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).startNodeID;
				startNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).endNodeID;
				
				for (String edgeKeysEnd : NetworkDataset.edgeHashMap.keySet() ) {
					if ((edgeKeysEnd == edgeKeysStart)
							|| (NetworkDataset.edgeHashMap.get(edgeKeysEnd).ifActiveEdge == false)
							|| (ifReversedEdge(edgeKeysStart, edgeKeysEnd) == true)) {
						continue;
					}
					
					//System.out.println("start: " + edgeKeysStart+", end: " + edgeKeysEnd);
					endNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).startNodeID;
					endNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).endNodeID;
					weight1 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).pathWeight; // weight of the 4 shortest path 
					weight2 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).pathWeight;
					weight3 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).pathWeight;
					weight4 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).pathWeight;
					
					for (int i = 0; i < NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity; i++) { // i-th activity on start edge
						for (int j = 0; j < NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity; j++) {  //j-th activity on end edge (activity on edge are ordered by their distance to start node of the edge)

							double partialWeight1 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode1; // activity i to its start
							double partialWeight2 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode2; // activity i to its end
							double partialWeight3 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode1; // activity j to its start
							double partialWeight4 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode2; // activity j to its end
							
							int index = minOfFour(weight1 + partialWeight1 + partialWeight3
									, weight2 + partialWeight1 + partialWeight4
									, weight3 + partialWeight2 + partialWeight3
									, weight4 + partialWeight2 + partialWeight4);
							
							if (index == 0) { // from start edge node 1, to end edge node 1
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+i+j+2, weight1 + partialWeight1 + partialWeight3);
								//System.out.println("index = 0, " + ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+"weight = "+weight1+"partial: "+partialWeight1+", "+partialWeight3);
							}
							else if (index == 1) {  // from start edge node 1, to end edge node 2
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity+i+1+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight2 + partialWeight1 + partialWeight4);
							}
							else if (index == 2) {   // from start edge node 2, to end edge node 1
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+j+1, weight3 + partialWeight2 + partialWeight3);
							}
							else if (index == 3) {  // from start edge node 2, to end edge node 2
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight4 + partialWeight2 + partialWeight4);
							}
							//System.out.println("statistic measure value = " + statisticMeasureValue);
						}
					}
				}
			}
		}
	}
	
// almost the same as processAllActivityPair, but with the list from SPTP
	void processAllActivityPairWithSPTP() {
		
		double weight1 = 0, weight2 = 0;
		double weight3 = 0, weight4 = 0;
		String startNode1ID = null; // node 1 of start edge
		String startNode2ID = null; // node 2 of start edge
		String endNode1ID = null; // node 1 of end edge
		String endNode2ID = null; // node 2 of end edge
		double statisticMeasureValue = -1;
		int countAfterSPTP = 0;
		
		for ( String edgeKeysStart : NetworkDataset.edgeHashMap.keySet() ) { // 2-level loop to enumerate all pairs of active edges
			if (NetworkDataset.edgeHashMap.get(edgeKeysStart).ifActiveEdge == true) {	
				startNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).startNodeID; // node 1 of start edge
				startNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).endNodeID; // node 2 of start edge
				
				for (int k = 0; k < possibleEdgeTable.get(startNode1ID).size()+possibleEdgeTable.get(startNode2ID).size(); k++){
					String edgeKeysEnd = null;
					if (k < possibleEdgeTable.get(startNode1ID).size()){
						edgeKeysEnd = possibleEdgeTable.get(startNode1ID).get(k);
					}
					else {
						edgeKeysEnd = possibleEdgeTable.get(startNode2ID).get(k-possibleEdgeTable.get(startNode1ID).size());
					}
					
					if ( (edgeKeysEnd == edgeKeysStart)
							|| (NetworkDataset.edgeHashMap.get(edgeKeysEnd).ifActiveEdge == false)
							|| (ifReversedEdge(edgeKeysStart, edgeKeysEnd) == true)) {
						continue;
					}
					
					//System.out.println("start: " + edgeKeysStart+", end: " + edgeKeysEnd + "2,3count = " + ShortestPathUtilityXun.shortestPathHashMap.get("2,3").nActivity);
					endNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).startNodeID;
					endNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).endNodeID;
					weight1 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).pathWeight; // sp weight
					weight2 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).pathWeight;
					weight3 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).pathWeight;
					weight4 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).pathWeight;
					
					for (int i = 0; i < NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity; i++) { // i-th activity on start edge
						for (int j = 0; j < NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity; j++) {  //j-th activity on end edge (activity on edge are ordered by their distance to start node of the edge)

							double partialWeight1 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode1; // activity i to its start
							double partialWeight2 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode2; // activity i to its end
							double partialWeight3 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode1; // activity j to its start
							double partialWeight4 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode2; // activity j to its end
							double totalWeight = 0;	
							
							int index = minOfFour(weight1 + partialWeight1 + partialWeight3
									, weight2 + partialWeight1 + partialWeight4
									, weight3 + partialWeight2 + partialWeight3
									, weight4 + partialWeight2 + partialWeight4);
								
							if (index == 0) { // from start edge node 1, to end edge node 1
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+i+j+2, weight1 + partialWeight1 + partialWeight3);
								//System.out.println("index = 0, " + ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+"weight = "+weight1+"partial: "+partialWeight1+", "+partialWeight3);
								totalWeight = weight1 + partialWeight1 + partialWeight3;
							}
							else if (index == 1) {  // from start edge node 1, to end edge node 2
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity+i+1+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight2 + partialWeight1 + partialWeight4);
								totalWeight = weight2 + partialWeight1 + partialWeight4;
							}
							else if (index == 2) {   // from start edge node 2, to end edge node 1
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+j+1, weight3 + partialWeight2 + partialWeight3);
								totalWeight = weight3 + partialWeight2 + partialWeight3;
							}
							else if (index == 3) {  // from start edge node 2, to end edge node 2
								statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight4 + partialWeight2 + partialWeight4);
								totalWeight = weight4 + partialWeight2 + partialWeight4;
							}		
							countAfterSPTP++;
							if ((statisticMeasureValue > SigRoutesMain.theta) && (totalWeight > 0.01)) {
								//System.out.println("LR: " + statisticMeasureValue + ", index: " + index);
							}
						}
					}
				}
			}
		}	
		System.out.println("number of activity pairs that survive the SPTP = "+ countAfterSPTP);
	}
	
	// alternative to "processActivityPair", using edge pair pruning
	void processActivityPairEdgePairPruning () {
		
		double weight1 = 0, weight2 = 0;
		double weight3 = 0, weight4 = 0;
		
		double lowerBoundWeight1 = 0, lowerBoundWeight2 = 0;
		double lowerBoundWeight3 = 0, lowerBoundWeight4 = 0;
		
		String startNode1ID = null; // node 1 of start edge
		String startNode2ID = null; // node 2 of start edge
		String endNode1ID = null; // node 1 of end edge
		String endNode2ID = null; // node 2 of end edge
		double upperBoundStatisticMeasureValue = -1;
		double statisticMeasureValue = -1;
		int prunedCount = 0, survivedCount = 0;
		
		for ( String edgeKeysStart : NetworkDataset.edgeHashMap.keySet() ) { // 2-level loop to enumerate all pairs of active edges
			if (NetworkDataset.edgeHashMap.get(edgeKeysStart).ifActiveEdge == true) {	
				startNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).startNodeID; // node 1 of start edge
				startNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).endNodeID; // node 2 of start edge
				
				for (String edgeKeysEnd : NetworkDataset.edgeHashMap.keySet() ) {
					if ((edgeKeysEnd == edgeKeysStart)
							|| (NetworkDataset.edgeHashMap.get(edgeKeysEnd).ifActiveEdge == false)
							|| (ifReversedEdge(edgeKeysStart, edgeKeysEnd) == true)) {
						continue;
					}
					
					//System.out.println("start: " + edgeKeysStart+", end: " + edgeKeysEnd + "2,3count = " + ShortestPathUtilityXun.shortestPathHashMap.get("2,3").nActivity);
					endNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).startNodeID;
					endNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).endNodeID;
					weight1 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).pathWeight; // sp weight
					weight2 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).pathWeight;
					weight3 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).pathWeight;
					weight4 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).pathWeight;
					
					lowerBoundWeight1 = weight1 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(0).weightToNode1 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(0).weightToNode1; 
					lowerBoundWeight2 = weight2 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(0).weightToNode1 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-1).weightToNode2;
					lowerBoundWeight3 = weight3 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-1).weightToNode2 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(0).weightToNode1;
					lowerBoundWeight4 = weight4 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-1).weightToNode2 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-1).weightToNode2;
					double lowerBoundWeightAll = minOfFourValue(lowerBoundWeight1, lowerBoundWeight2, lowerBoundWeight3, lowerBoundWeight4);
					//double lowerBoundWeightAll = minOfFourValue(weight1, weight2, weight3, weight4);
					
					double upperBoundCountAll = maxOfFourValue(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity);
					upperBoundCountAll += (NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity + NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity);

					upperBoundStatisticMeasureValue = StatisticMeasure.densityRatio(upperBoundCountAll, lowerBoundWeightAll);
					if (upperBoundStatisticMeasureValue < SigRoutesMain.theta) {
						//System.out.println("A pair of edges pruned! Start edge ID: "+ edgeKeysStart + " End edge ID: " + edgeKeysEnd + " upperbound = "+ upperBoundStatisticMeasureValue);
						//System.out.println("upper bound count = "+upperBoundCountAll+" lower bound weight = "+lowerBoundWeightAll);
						prunedCount++;
					}
					
					else { // if NOT pruned, compute each activities on the edge
						for (int i = 0; i < NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity; i++) { // i-th activity on start edge
							for (int j = 0; j < NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity; j++) {  //j-th activity on end edge (activity on edge are ordered by their distance to start node of the edge)

								double partialWeight1 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode1; // activity i to its start
								double partialWeight2 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode2; // activity i to its end
								double partialWeight3 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode1; // activity j to its start
								double partialWeight4 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode2; // activity j to its end
								
								int index = minOfFour(weight1 + partialWeight1 + partialWeight3
										, weight2 + partialWeight1 + partialWeight4
										, weight3 + partialWeight2 + partialWeight3
										, weight4 + partialWeight2 + partialWeight4);
								
								if (index == 0) { // from start edge node 1, to end edge node 1
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+i+j+2, weight1 + partialWeight1 + partialWeight3);
									//System.out.println("index = 0, " + ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+"weight = "+weight1+"partial: "+partialWeight1+", "+partialWeight3);
								}
								else if (index == 1) {  // from start edge node 1, to end edge node 2
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity+i+1+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight2 + partialWeight1 + partialWeight4);
								}
								else if (index == 2) {   // from start edge node 2, to end edge node 1
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+j+1, weight3 + partialWeight2 + partialWeight3);
								}
								else if (index == 3) {  // from start edge node 2, to end edge node 2
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight4 + partialWeight2 + partialWeight4);
								}
								//System.out.println("statistic measure value = " + statisticMeasureValue);
								survivedCount++;
							}
						}
					}
				}
			}
		}
		System.out.println("pc: "+prunedCount+" sc: "+survivedCount+" ratio = "+ ((double)prunedCount / (prunedCount+survivedCount)));
	}
	
	void processActivityPairEdgePairPruningTwo () {
	//mostly the same as the previous function, except the destination edges are from the SPtree pruning
		
		double weight1 = 0, weight2 = 0;
		double weight3 = 0, weight4 = 0;
		
		double lowerBoundWeight1 = 0, lowerBoundWeight2 = 0;
		double lowerBoundWeight3 = 0, lowerBoundWeight4 = 0;
		
		String startNode1ID = null; // node 1 of start edge
		String startNode2ID = null; // node 2 of start edge
		String endNode1ID = null; // node 1 of end edge
		String endNode2ID = null; // node 2 of end edge
		double upperBoundStatisticMeasureValue = -1;
		double statisticMeasureValue = -1;
		int prunedCount = 0, survivedCount = 0;
		
		for ( String edgeKeysStart : NetworkDataset.edgeHashMap.keySet() ) { // 2-level loop to enumerate all pairs of active edges
			if (NetworkDataset.edgeHashMap.get(edgeKeysStart).ifActiveEdge == true) {	
				startNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).startNodeID; // node 1 of start edge
				startNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysStart).endNodeID; // node 2 of start edge
				
				for (int k = 0; k < possibleEdgeTable.get(startNode1ID).size()+possibleEdgeTable.get(startNode2ID).size(); k++){
					String edgeKeysEnd = null;
					if (k < possibleEdgeTable.get(startNode1ID).size()){
						edgeKeysEnd = possibleEdgeTable.get(startNode1ID).get(k);
					}
					else {
						edgeKeysEnd = possibleEdgeTable.get(startNode2ID).get(k-possibleEdgeTable.get(startNode1ID).size());
					}
					
					if ( (edgeKeysEnd == edgeKeysStart)
							|| (NetworkDataset.edgeHashMap.get(edgeKeysEnd).ifActiveEdge == false)
							|| (ifReversedEdge(edgeKeysStart, edgeKeysEnd) == true)) {
						continue;
					}
					
					//System.out.println("start: " + edgeKeysStart+", end: " + edgeKeysEnd + "2,3count = " + ShortestPathUtilityXun.shortestPathHashMap.get("2,3").nActivity);
					endNode1ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).startNodeID;
					endNode2ID = NetworkDataset.edgeHashMap.get(edgeKeysEnd).endNodeID;
					weight1 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).pathWeight; // sp weight
					weight2 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).pathWeight;
					weight3 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).pathWeight;
					weight4 = ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).pathWeight;
					
					lowerBoundWeight1 = weight1 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(0).weightToNode1 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(0).weightToNode1; 
					lowerBoundWeight2 = weight2 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(0).weightToNode1 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-1).weightToNode2;
					lowerBoundWeight3 = weight3 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-1).weightToNode2 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(0).weightToNode1;
					lowerBoundWeight4 = weight4 + NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-1).weightToNode2 + NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-1).weightToNode2;
					double lowerBoundWeightAll = minOfFourValue(lowerBoundWeight1, lowerBoundWeight2, lowerBoundWeight3, lowerBoundWeight4);
					//double lowerBoundWeightAll = minOfFourValue(weight1, weight2, weight3, weight4);
					
					double upperBoundCountAll = maxOfFourValue(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity
							, ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity);
					upperBoundCountAll += (NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity + NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity);

					upperBoundStatisticMeasureValue = StatisticMeasure.densityRatio(upperBoundCountAll, lowerBoundWeightAll);
					if (upperBoundStatisticMeasureValue < SigRoutesMain.theta) {
						//System.out.println("A pair of edges pruned! Start edge ID: "+ edgeKeysStart + " End edge ID: " + edgeKeysEnd + " upperbound = "+ upperBoundStatisticMeasureValue);
						//System.out.println("upper bound count = "+upperBoundCountAll+" lower bound weight = "+lowerBoundWeightAll);
						prunedCount++;
					}
					
					else { // if NOT pruned, compute each activities on the edge
						for (int i = 0; i < NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity; i++) { // i-th activity on start edge
							for (int j = 0; j < NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity; j++) {  //j-th activity on end edge (activity on edge are ordered by their distance to start node of the edge)

								double partialWeight1 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode1; // activity i to its start
								double partialWeight2 = NetworkDataset.edgeHashMap.get(edgeKeysStart).activity.get(i).weightToNode2; // activity i to its end
								double partialWeight3 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode1; // activity j to its start
								double partialWeight4 = NetworkDataset.edgeHashMap.get(edgeKeysEnd).activity.get(j).weightToNode2; // activity j to its end
								
								int index = minOfFour(weight1 + partialWeight1 + partialWeight3
										, weight2 + partialWeight1 + partialWeight4
										, weight3 + partialWeight2 + partialWeight3
										, weight4 + partialWeight2 + partialWeight4);
								
								if (index == 0) { // from start edge node 1, to end edge node 1
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+i+j+2, weight1 + partialWeight1 + partialWeight3);
									//System.out.println("index = 0, " + ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode1ID).nActivity+"weight = "+weight1+"partial: "+partialWeight1+", "+partialWeight3);
								}
								else if (index == 1) {  // from start edge node 1, to end edge node 2
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode1ID+","+endNode2ID).nActivity+i+1+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight2 + partialWeight1 + partialWeight4);
								}
								else if (index == 2) {   // from start edge node 2, to end edge node 1
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode1ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+j+1, weight3 + partialWeight2 + partialWeight3);
								}
								else if (index == 3) {  // from start edge node 2, to end edge node 2
									statisticMeasureValue = StatisticMeasure.densityRatio(ShortestPathUtilityXun.shortestPathHashMap.get(startNode2ID+","+endNode2ID).nActivity+NetworkDataset.edgeHashMap.get(edgeKeysStart).numActivity-i+NetworkDataset.edgeHashMap.get(edgeKeysEnd).numActivity-j, weight4 + partialWeight2 + partialWeight4);
								}
								//System.out.println("statistic measure value = " + statisticMeasureValue);
								survivedCount++;
							}
						}
					}
				}
			}
		}
		System.out.println("pc: "+prunedCount+" sc: "+survivedCount+" ratio = "+ ((double)prunedCount / (prunedCount+survivedCount)));
	}
	
	
	// this pruning algorithm find a set of active edges that associated with an active edge
	void SPTreePruning (){
		for (int i = 0; i < NetworkDataset.numTotalNodes; i++){
			if (NetworkDataset.nodeHashMap.get(NetworkDataset.nodeIDList.get(i)).ifActiveNode == true) {
				possibleEdgeTable.put(NetworkDataset.nodeIDList.get(i), new ArrayList<String>());
				//System.out.println("Node: " + NetworkDataset.nodeIDList.get(i));
				depthFirstSearchXun(ShortestPathUtilityXun.shortestPathTreeHashMap.get(NetworkDataset.nodeIDList.get(i)));
			}
		}
		//processActivityPairEdgePairPruningTwo();
		processAllActivityPairWithSPTP();
	}
	
	void depthFirstSearchXun(ShortestPathTreeXun spTree) {
		
		HashMap<String, Boolean> ifVisited = new HashMap<String, Boolean>();
		
		double spTreeUpperBoundCount;
		double spTreeLowerBoundWeight;
		double spTreeUpperBoundMeasureValue;
		
		Stack<String> stack = new Stack<String>();
		for (int i = 0; i < spTree.nextEdgeIDs.get(spTree.rootNodeId).size(); i++){ // push the source node's nextNodes into the stack
			stack.push(NetworkDataset.edgeHashMap.get(spTree.nextEdgeIDs.get(spTree.rootNodeId).get(i)).endNodeID);
		}
		for (int i = 0; i < NetworkDataset.numTotalNodes; i++) {
			ifVisited.put(NetworkDataset.nodeIDList.get(i), false);
		}
		ifVisited.put(spTree.rootNodeId, true);

		while (stack.empty() == false) {
			String tmpNodeID = stack.pop();
//			if (ifVisited.get(tmpNodeID) == true) {
//				continue;
//			}
			ifVisited.put(tmpNodeID, true);
			//System.out.println("tmp node: " + tmpNodeID);
			spTreeUpperBoundCount = NetworkDataset.nodeHashMap.get(spTree.rootNodeId).maxActivitiesNeighborIn
					+ spTree.sumSubTree.get(tmpNodeID)
					+ ShortestPathUtilityXun.shortestPathHashMap.get(spTree.rootNodeId+","+tmpNodeID).nActivity
					+ spTree.maxActivitiesNeighborSubTreeOut.get(tmpNodeID);
					
			spTreeLowerBoundWeight = ShortestPathUtilityXun.shortestPathHashMap.get(spTree.rootNodeId+","+tmpNodeID).pathWeight;
			spTreeUpperBoundMeasureValue =  StatisticMeasure.densityRatio(spTreeUpperBoundCount, spTreeLowerBoundWeight);
			//System.out.println("countupper = " + spTreeUpperBoundCount + " weightlower = " + spTreeLowerBoundWeight);
			if (spTreeUpperBoundMeasureValue >= SigRoutesMain.theta) {
				for (int j = 0; j < spTree.nextEdgeIDs.get(tmpNodeID).size(); j++){	
					if (ifVisited.get(NetworkDataset.edgeHashMap.get(spTree.nextEdgeIDs.get(tmpNodeID).get(j)).endNodeID) == true) {
						continue;
					}
					stack.push(NetworkDataset.edgeHashMap.get(spTree.nextEdgeIDs.get(tmpNodeID).get(j)).endNodeID);
					possibleEdgeTable.get(spTree.rootNodeId).add(spTree.nextEdgeIDs.get(tmpNodeID).get(j));
				}
			}
		}	
	}
	
	public static void main(String[] args) throws IOException {
		
		String nodePath = "/Users/tangxun/Desktop/SLHD/synthetic_data/new_nodes_500.txt";
		String edgePath = "/Users/tangxun/Desktop/SLHD/synthetic_data/new_edges_500.txt";
		String activityPath = "/Users/tangxun/Desktop/SLHD/synthetic_data/new_activities_500n_200.txt";

		Runtime runtime = Runtime.getRuntime();
//		long memory1 = runtime.totalMemory() - runtime.freeMemory();
//		System.out.println("memory used1 = " + memory1 + " B");
				
		AllPairShortestPathXun allPairShortestPathXun = new AllPairShortestPathXun();
		NetworkDataset myNetworkDataset = new NetworkDataset();
		myNetworkDataset.readNode(nodePath);
		myNetworkDataset.readEdge(edgePath);
		myNetworkDataset.readActivity(activityPath);
		
		long memory2 = runtime.totalMemory() - runtime.freeMemory();
		System.out.println("memory used2 = " + memory2 + " B");

		
		long time1 = System.currentTimeMillis();
		allPairShortestPathXun.computeAllPairShortestPath();
		long time2 = System.currentTimeMillis();
				
		long memory3 = runtime.totalMemory() - runtime.freeMemory();
		System.out.println("memory used3 = " + memory3 + " B");
		
		
		System.out.println();
		System.out.println("All pair shortest path costs = " + (time2-time1));
		System.out.println("SP tree hashmap size = " + ShortestPathUtilityXun.shortestPathTreeHashMap.size());
		System.out.println("SP path hashmap size = " + ShortestPathUtilityXun.shortestPathHashMap.size());

		
		ActivityPair myActivityPair = new ActivityPair();
		long time3 = System.currentTimeMillis();
		
		//myActivityPair.processAllActivityPair(); // use neighbor node filter
		//myActivityPair.processActivityPairEdgePairPruning(); // use active edge pair upper-bound pruning
		myActivityPair.SPTreePruning(); // use SP tree pruning (TKDE approach)
		
		long memory4 = runtime.totalMemory() - runtime.freeMemory();
		System.out.println("memory used4 = " + memory4 + " B");
		
		long time4 = System.currentTimeMillis();
		System.out.println("activity pair costs = " + (time4-time3));
	}
	
}
